2019-06-02
----------

issue #20
read idf file

Look very feasible
- use the witheppy read using noeppy function to read the idf file in
- use the legacy idf def in the epjson to translate to json
- to save as idf - again use legacy idf def in the epjson

pathway
- start with simple objects and test run it 
- then work with more complex objects
- finally test with all the files in the example folder


2018-12-24
----------

- set up one test - DONE
- do numpy type doc
- test setup.py - DONE 
- deploy on pypi on pyenergyplus
- set up travis - DONE on santoshphilip
- set up travis on pyenergyplus

2018-12-16
----------

issues for the moment:

- IDF() will open a new IDD for each file
- if 'eppy_objidd' key not present - throw an IDD not available exception
- IDD has key `items` in the JSON that name-clashes with items function in dict

fixed issue #6

close to release. need the following
- newidfobject - DONE
- copyidfobject
- removeidfobject # popidfobject to be done later - DONE
- see if things break on the inner lists
- StringIO for IDD - DONE

notes to work thru while coding.

- include arg idd in IDF (not a singleton now)
- write an easyopen
- sort the print of the epMunch be IDD sort order
-
- need idd and idd_munch functions
    - idd.version
    - idd.objects # dict
    - iddobj.fieldnames
    - iddobj.fieldvalues
    - iddobj.fieldnames_simple
    - iddobj.fieldvalues_simple
    - iddobj.fieldnames_list
    - iddobj.fieldvalues_list
    - class IDD

idd.properties['BuildingSurface:Detailed'].patternProperties['.*'].properties.vertices.items()

iddMunch
